{"name": "test_checkout_empty_cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: MicrosoftEdge=130.0.2849.56)\nStacktrace:\n\tGetHandleVerifier [0x00007FF66A01DC75+12853]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF66A2C83C4+2250276]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF66A2076A6+1460486]\n\t(No symbol) [0x00007FF669DB84C7]\n\t(No symbol) [0x00007FF669E3CBED]\n\t(No symbol) [0x00007FF669E50D7A]\n\t(No symbol) [0x00007FF669E38163]\n\t(No symbol) [0x00007FF669E0FB54]\n\t(No symbol) [0x00007FF669E0F000]\n\t(No symbol) [0x00007FF669E0F741]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF66A19CDB4+1024020]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF669F39A04+57108]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF66A19BDB3+1019923]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF66A19BA19+1019001]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF669FBE031+394913]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF669FBA954+380868]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF669FBAA99+381193]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF669FB2296+346374]\n\tBaseThreadInitThunk [0x00007FFCA624259D+29]\n\tRtlUserThreadStart [0x00007FFCA7B8AF38+40]", "trace": "driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"1bdc798c7e1ed44f52ca0520aaacc3b2\")>\n\n    def test_checkout_empty_cart(driver):\n        time.sleep(2)\n>       driver.find_element(By.XPATH, \"//*[@id='top']/div/div[2]/ul/li[5]/a\").click()\n\nTest_addtocart_checkout.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\test_env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\test_env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000246DCC644D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...FB2296+346374]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCA624259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFCA7B8AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: MicrosoftEdge=130.0.2849.56)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66A01DC75+12853]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF66A2C83C4+2250276]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF66A2076A6+1460486]\nE       \t(No symbol) [0x00007FF669DB84C7]\nE       \t(No symbol) [0x00007FF669E3CBED]\nE       \t(No symbol) [0x00007FF669E50D7A]\nE       \t(No symbol) [0x00007FF669E38163]\nE       \t(No symbol) [0x00007FF669E0FB54]\nE       \t(No symbol) [0x00007FF669E0F000]\nE       \t(No symbol) [0x00007FF669E0F741]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF66A19CDB4+1024020]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF669F39A04+57108]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF66A19BDB3+1019923]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF66A19BA19+1019001]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF669FBE031+394913]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF669FBA954+380868]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF669FBAA99+381193]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF669FB2296+346374]\nE       \tBaseThreadInitThunk [0x00007FFCA624259D+29]\nE       \tRtlUserThreadStart [0x00007FFCA7B8AF38+40]\n\n..\\test_env\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1730425604425, "stop": 1730425606426, "uuid": "ecec39f3-c405-48a6-b9dd-8b87b45ec9b2", "historyId": "c96b03e2fad321732314cc33ffee7b2f", "testCaseId": "c96b03e2fad321732314cc33ffee7b2f", "fullName": "Test_addtocart_checkout#test_checkout_empty_cart", "labels": [{"name": "suite", "value": "Test_addtocart_checkout"}, {"name": "host", "value": "LAPTOP-JR4A6QE4"}, {"name": "thread", "value": "18992-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_addtocart_checkout"}]}